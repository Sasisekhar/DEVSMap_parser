{
    "counter": {
        "s": {
            "count": "int",
            "increment": "unsigned int",
            "countUp": "bool",
            "sigma": "double"
        },
        "x": {
            "direction_in": "bool",
            "increment_in": "int"
        },
        "y": {
            "count_out": "int"
        },
        "delta_int": {
            "countUp == true": {
                "count": "count + increment"
            },
            "countUp == false": {
                "count": "count - increment"
            },
            "otherwise": {}
        },
        "delta_ext": {
            "direction_in.bagSize() != 0": {
                "countUp": "direction_in.bag(-1)"
            },
            "increment_in.bagSize() != 0": {
                "increment": "increment_in.bag(-1)"
            },
            "otherwise": {
                "countUp": "direction_in.bag(-1)",
                "increment": "increment_in.bag(-1)"
            }
        },
        "delta_con": {
            "direction_in.bagSize() != 0": {
                "direction_in.bag(-1) == true": {
                    "count": "count + increment",
                    "countUp": "direction_in.bag(-1)"
                },
                "direction_in.bag(-1) == false": {
                    "count": "count - increment",
                    "countUp": "direction_in.bag(-1)"
                }
            },
            "increment_in.bagSize() != 0": {
                "countUp == true": {
                    "count": "count + increment_in.bag(-1)",
                    "increment": "increment_in.bag(-1)"
                },
                "countUp == false": {
                    "count": "count - increment_in.bag(-1)",
                    "increment": "increment_in.bag(-1)"
                }
            },
            "otherwise": {
                "direction_in.bag(-1) == true": {
                    "count": "count + increment_in.bag(-1)",
                    "increment": "increment_in.bag(-1)",
                    "countUp": "direction_in.bag(-1)"
                },
                "direction_in.bag(-1) == false": {
                    "count": "count - increment_in.bag(-1)",
                    "increment": "increment_in.bag(-1)",
                    "countUp": "direction_in.bag(-1)"
                }
            }
        },
        "lambda": {
            "otherwise": {
                "count_out": "count"
            }
        },
        "ta": {
            "otherwise": "sigma"
        }
    },
    "include_sets": [
        "default_sets.json"
    ],
    "parameters": {}
}